# Generated by Django 5.1.4 on 2025-05-29 11:19

import analytics.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BillingDataUpload',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the upload', primary_key=True, serialize=False)),
                ('upload_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when the file was uploaded')),
                ('file', models.FileField(help_text='The uploaded CSV or Excel file', upload_to=analytics.models.upload_to_user_directory, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['csv', 'xlsx', 'xls'])])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('processed', 'Processed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', help_text='Current processing status of the upload', max_length=20)),
                ('original_filename', models.CharField(help_text='Original name of the uploaded file', max_length=255)),
                ('file_size', models.PositiveIntegerField(help_text='Size of the uploaded file in bytes')),
                ('total_rows', models.PositiveIntegerField(blank=True, help_text='Total number of rows in the uploaded file', null=True)),
                ('processed_rows', models.PositiveIntegerField(default=0, help_text='Number of rows successfully processed')),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('processing_started_at', models.DateTimeField(blank=True, help_text='When processing started', null=True)),
                ('processing_completed_at', models.DateTimeField(blank=True, help_text='When processing completed', null=True)),
                ('user', models.ForeignKey(help_text='User who uploaded the file', on_delete=django.db.models.deletion.CASCADE, related_name='billing_uploads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Billing Data Upload',
                'verbose_name_plural': 'Billing Data Uploads',
                'ordering': ['-upload_date'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query_text', models.TextField(help_text="The user's natural language query")),
                ('query_type', models.CharField(choices=[('summary', 'Summary'), ('trend', 'Trend Analysis'), ('comparison', 'Comparison'), ('prediction', 'Prediction'), ('custom', 'Custom Query')], default='custom', help_text='Type of analytics query', max_length=50)),
                ('response_text', models.TextField(help_text="ChatGPT's response to the query")),
                ('data_context', models.JSONField(default=dict, help_text='Data context sent to ChatGPT (anonymized)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processing_time', models.DurationField(blank=True, help_text='Time taken to process the query', null=True)),
                ('user', models.ForeignKey(help_text='User who made the query', on_delete=django.db.models.deletion.CASCADE, related_name='analytics_queries', to=settings.AUTH_USER_MODEL)),
                ('upload', models.ForeignKey(blank=True, help_text='Optional: specific upload context for the query', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='analytics_queries', to='analytics.billingdataupload')),
            ],
            options={
                'verbose_name': 'Analytics Query',
                'verbose_name_plural': 'Analytics Queries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BillingRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date of the billing record')),
                ('customer_name', models.CharField(db_index=True, help_text='Name of the customer', max_length=255)),
                ('invoice_number', models.CharField(db_index=True, help_text='Invoice or transaction number', max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Total amount for this record', max_digits=15)),
                ('description', models.TextField(blank=True, help_text='Description of the transaction')),
                ('product_name', models.CharField(blank=True, help_text='Product or service name', max_length=255)),
                ('quantity', models.DecimalField(blank=True, decimal_places=2, help_text='Quantity of items', max_digits=10, null=True)),
                ('unit_price', models.DecimalField(blank=True, decimal_places=2, help_text='Price per unit', max_digits=15, null=True)),
                ('tax_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Tax amount', max_digits=15, null=True)),
                ('discount', models.DecimalField(blank=True, decimal_places=2, help_text='Discount amount', max_digits=15, null=True)),
                ('payment_method', models.CharField(blank=True, help_text='Payment method used', max_length=50)),
                ('payment_status', models.CharField(choices=[('paid', 'Paid'), ('pending', 'Pending'), ('overdue', 'Overdue'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', help_text='Payment status', max_length=20)),
                ('custom_fields', models.JSONField(blank=True, default=dict, help_text='Additional custom fields from the upload')),
                ('row_number', models.PositiveIntegerField(help_text='Original row number in the uploaded file')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('upload', models.ForeignKey(help_text='The upload this record originated from', on_delete=django.db.models.deletion.CASCADE, related_name='billing_records', to='analytics.billingdataupload')),
            ],
            options={
                'verbose_name': 'Billing Record',
                'verbose_name_plural': 'Billing Records',
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MappedField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_column', models.CharField(help_text='Original column name from the uploaded file', max_length=255)),
                ('mapped_field', models.CharField(choices=[('date', 'Date'), ('customer_name', 'Customer Name'), ('invoice_number', 'Invoice Number'), ('amount', 'Amount'), ('description', 'Description'), ('product_name', 'Product Name'), ('quantity', 'Quantity'), ('unit_price', 'Unit Price'), ('tax_amount', 'Tax Amount'), ('discount', 'Discount'), ('payment_method', 'Payment Method'), ('payment_status', 'Payment Status'), ('custom', 'Custom Field')], help_text='Field type this column is mapped to', max_length=50)),
                ('custom_field_name', models.CharField(blank=True, help_text="Custom field name if mapped_field is 'custom'", max_length=255)),
                ('is_required', models.BooleanField(default=False, help_text='Whether this field is required for processing')),
                ('data_type', models.CharField(choices=[('string', 'Text'), ('number', 'Number'), ('date', 'Date'), ('boolean', 'Yes/No')], default='string', help_text='Expected data type for this field', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('upload', models.ForeignKey(help_text='The upload this mapping belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='field_mappings', to='analytics.billingdataupload')),
            ],
            options={
                'verbose_name': 'Mapped Field',
                'verbose_name_plural': 'Mapped Fields',
                'ordering': ['original_column'],
            },
        ),
        migrations.AddIndex(
            model_name='billingdataupload',
            index=models.Index(fields=['user', '-upload_date'], name='analytics_b_user_id_ade221_idx'),
        ),
        migrations.AddIndex(
            model_name='billingdataupload',
            index=models.Index(fields=['status'], name='analytics_b_status_9f3862_idx'),
        ),
        migrations.AddIndex(
            model_name='billingrecord',
            index=models.Index(fields=['upload', 'date'], name='analytics_b_upload__ed3d61_idx'),
        ),
        migrations.AddIndex(
            model_name='billingrecord',
            index=models.Index(fields=['customer_name'], name='analytics_b_custome_3a3966_idx'),
        ),
        migrations.AddIndex(
            model_name='billingrecord',
            index=models.Index(fields=['invoice_number'], name='analytics_b_invoice_f1d0c7_idx'),
        ),
        migrations.AddIndex(
            model_name='billingrecord',
            index=models.Index(fields=['amount'], name='analytics_b_amount_02cfa2_idx'),
        ),
        migrations.AddIndex(
            model_name='billingrecord',
            index=models.Index(fields=['payment_status'], name='analytics_b_payment_609a44_idx'),
        ),
        migrations.AddIndex(
            model_name='billingrecord',
            index=models.Index(fields=['date'], name='analytics_b_date_edee73_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mappedfield',
            unique_together={('upload', 'original_column')},
        ),
    ]
